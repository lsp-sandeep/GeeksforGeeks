#%%
import math

#%%
class Solution:
    def findTriplets(self, arr):
        # Your code here
        
        n = len(arr)
        
        print(arr[1], arr[107], arr[204])

        triplets = []
        
        for i in range(n - 2):
            
            target = -1 * arr[i]
            
            hash_map = {}
            
            for k in range(i+1, n):
                
                diff = target - arr[k]
                
                if diff in hash_map:

                    # print(i, k, diff, hash_map[diff])
                    
                    for j in hash_map[diff]:

                        triplets.append([i, j, k])
                
                if arr[k] in hash_map:

                    hash_map[arr[k]] = hash_map[arr[k]] + [k]
                
                else:
                    
                    hash_map[arr[k]] = [k]
            
            if i == 0:

                print(hash_map)

        return triplets
                    
#%%

arr = [
    5227, -687, 2684, -4585, 6426, -3186, -3214, -2844, 6078, -3242, -9025, 2897, 659, -322, 8857, 1161, -3649, -9611, -3865, 1298, 7450, -6860, -4225, 706, 1602, -2287, -4861, -476, -5090, -1900, -1090, -3568, 636, 2125, 1394, 9345, 4081, 2298, -6613, -1606, 9161, 3104, -7831, -6967, -683, 5504, 653, 171, -8361, 996, 9337, -5821, -7895, -4219, 2919, 430, -9859, 8117, -7485, -2368, 7237, -3144, 909, 7665, -6295, 7838, -662, -5516, 1069, 96, -1400, -5296, 9057, -2257, -7946, -3717, 7376, -1167, -6309, 280, 86, -8357, -9617, 9047, 4855, -8728, -606, -6923, 2830, 2663, -795, 4250, -6867, 8698, 7686, -7527, 8446, -1040, 8982, -94, -843, 42, -2881, -1934, 6890, 2429, 9445, 8978, -6151, 8971, -9800, -5558, -3236, 755, -1481, 6187, 5005, 9008, -1112, -2143, 5056, -5926, 7078, 7238, 5788, 115, 3937, 5783, -8138, -467, -4684, 9321, -9722, 5868, -2377, -1303, -9879, 2738, 5470, -1844, 6732, 1188, -2738, 6494, -2637, -1046, 2993, -8708, -6539, 9706, 7364, -4420, 3388, 4062, -5454, 4679, 1538, 3281, 1389, 729, -6621, -1971, -6029, 7242, -1901, 7780, 863, 8009, -999, -5780, -4181, 5359, -1373, 1415, 843, -448, -6819, -5224, -9523, 9969, -6502, -922, -9482, 1073, 5213, 9637, 2702, -5051, 4717, -1602, -9244, -6521, -2409, 3935, 9599, -2616, -6472, 3212, -7022, 8632, -3999, -5045, 4386, -56, -8363, -3954, 1272, -3581, 507, -2464, -23, 1189, -8074, -9756, 860, 4165, -2226, 6384, 5306, -3039, -2328, 1830, -3390, -3834, -4340, 1304, 7779, 3254, -7799, -2933, 6967, -5446, 9552, -2537, 1869, 2579, 7771, -1741, -7036, 4287, -677, 6665, -8024, 8917, 7233, -3727, 2541, -5288, 234, -4060, 5934, -3589, 4267, -8413, -7268, -2332, -8200, -7756, 2975, -610, 1372, -8145, -7740, 9945, -6606, -5518, -8817, -786, 3721, 807, -2424, 2612, 826, -2751, 6742, 136, 298, 6880, 9480, -646, 6536, 2639, -7269, 3338, -8291, -7576, 823, 5294, -5184, 4011, -6456, 411, 9081, 3836, -2174, -9078, -5789, -743, -3775, 9387, -1324, 1829, -2360, 5668, 6363, -2853, 4281, -1716, -8827, -4533, -805, 9625, 2332, -2996, -4553, -2872, 7305, -96, 4061, 9866, 3638, 9519, 2366, 6389, 2403, -1976, 8469, 8045, -6516, 9743, -3838, 8158, -2255, -3621, 3951, -8335, 2877, -7313, -736, 2081, -8280, 765, 1319, 523, 5064, -1450, 4596, -698, 6897, -593, -3659, 4941, -5920, 9474, 304, 3014, 4365, -9430, 8657, 8138, -5825, 6583, 7400, 1323, 7115, 2937, 2394, 3447, -9100, -3189, 2359, 8454, 5078, -8706, -1403, -6434, 3927, 5344, -4011, 8058, -6868, -1448, 2236, -9305, -1029, -3652, -8072, 9178, -3473, -2647, 3692, -3116, -7391, 7940, 8482, -9793, 6821, 5975, -8985, -3931, 9953, 8866, -3423, 561, -8380, -4984, 6440, -1402, -3934, -3589, 9790, 1332, 5366, -2300, 2578, -3231, 9590, 2594, 8719, -8686, 6485, -2815, 259, 2288, 267, -9903, -7442, -8387, 8590, 353, -7390, 1815, -3568, -4688, 237, -2486, -4985, -7580, 4839, -5903, -7499, -8623, 1105, -1405, -9755, -1012, -8415, 1285, -3974, 1449, -8866, 1274, 4124, -4884, 8257, -4914, -6506, 8717, 1193, -8040, -5048, -5179, 1611, -4206, 3726, 6902, -2197, 5857, 7607, 4693, -2709, 7009, -3555, 5257, -4320, 8516, -7086, -4474, -3721, -3417, -3534, 1227, 4053, 4225, 7249, -5706, 9995, -7458, -7105, -694, -6703, -2102, 2093, 8192, -9505, -1373, 2537, -5986, 1762, -6396, -4126, -6474, 6569, -6270, -5021, -4875, -8749, -3391, -3448, -3761, -9905, -8166, -257, -3284, 4744, 5362, -5308, -4450, -1756, 9611, 3842, 6224, -4412, 8181, -7442, 2898, 2434, -6032, -3889, -4628, -7117, -5030, -2120, 5860, 587, -1751, -9108, 6680, 6004, 1446, 3847, -2550, 3076, 146, 6342, 7938, -2467, -8015, -2188, -5679, 5614, -1608, -491, -2139, -3758, -9007, -662, 3967, -2705, 3969, -5484, 2521, -6732, 2713, -4336, 1525, 8443, 3411, 6928, 4774, 4918, 1204, 9129, -5097, -1362, -383, 7319, -8340, 8940, -4981, 2003, -4619, 6740, -7668, -7961, 302, 8810, 2773, -360, 5341, 1173, 4477, 3745, 3441, -7558, 9109, 5922, 551, -8585, 7938, 2886, 495, -3732, 50, -65, 3542, 6166, -4536, -1449, 7398, 1389, 566, -7290, 6911, -8911, 3339, 7883, -3457, -6406, -7280, 7854, 1178, -7494, 7435, 7643, -9898, 6093, 989, 5560, 4, 516, 3696, -7988, 4021, -4169, -7186, 9722, -6152, 1705, 1045, 1991, -7317, -1211, 8927, -7887, -6758, 8398, -2541, 6823, -1009, 156, 5658, 6287, 3187, 1115, 5650, 3578, 3749, -3118, -7469, 5977, 1106, 3232, -7354, 9013, 6072, -6569, 5538, -6221, -7778, 2080, -217, 4507, -292, 7532, 9354, 6223, 482, 1444, -9154, 7125, 7516, 952, -4124, -8551, -8827, -6685, -7549, -1526, 8519, 4138, 7662, -690, 1426, 5037, -1503, 6552, -5463, 8580, -2986, 307, 2543, -9471, -5676, 7788, 6775, 584, -3085, -5756, -1465, 847, 1903, -8130, -1795, -4179, -6389, 5524, -5503, -7202, -3931, 5500, 8572, 8083, 9320, 9702, -731, -276, 509, 4189, -7864, -9908, 1859, 3434, -1314, -8725, 2331, -754, -62, -7587, -2076, -7406, 1502, -355, 6829, 4272, -4104, -673, 4237, 9472, -4732, -3242, -1073, -332, -9824, -6607, 3616, -1985, -7223, -2991, -1547, -4194, -1764, 1150, 8803, -4092, -3690, 7636, -838, -5291, -1688, 1637, -9456, -7458, -6649, -152, 4996, -1052, 5540, 2285, -4015, 1127, -4954, -2049, -22, 509, 1478, 6885, -2688, 8032, 3344, -348, 4005, -2875, 2691, 7942, -98, 4217, 1640, 5628, -696, 7202, 3736, -4498, 7760, 6880, -7154, 9490, -3473, 6955, -2428, -1066, 1534, -549, 448, -3224, -6460, 1035, -5286, 23, -7751, 4812, -5909, 2984, 8920, 5474, 5538, -6109, 3467, -6422, -1493, -5913, 48, 5045, 8649, -5756, -5611, 3908, 3499, 8413, 1935, 3537, -7815, -5064, 9677, -9225, -8903, 7, 718, -7403, -2167, 3846, 5172, -7985, -710, 263, -8338, -9097, -7153, -4176, -2663, 416, -1071, 6444, 9235, -4041, 6109, -5164, -5185, 2253, -3465, -5988, 5548, 6274, -1793, -5543, 2928, 9783, -4101, 5223, 2188, -2056, -6512, 4935, -3091, -2357, -4425, 2686, -389, -4714, -5448, -4048, 8423, 9103, 4121, -2802, 1655, 4944, -7834, -89, 663, 5246, -5849, -8129, -803, -476, -8205, 1881, 4545, 301, 7046, -4652, -1195, 412, -3694, 1508, 567, -8565, -3391, -9161, 1642, 2073, 4612, 8189, 4498, 4592, -6743, -880, 5349, -6548, 8637, -3255, 6351
]      

ob = Solution()

print(sorted(ob.findTriplets(arr)))

# %%


#%%
